package nmw.euler.twothreefour;

public class SemiDivisibleProducer implements Runnable {

	private long limit;
	

	private static double redundant = 0d;
	private static long r_ups, r_lps;
	private static long output = 0l;
	
	
	private static double sq_root;
	private static long n_sq_root;

	private static long lps = 0l;
	private static long ups = 0l;
	
	public SemiDivisibleProducer(long limit) {
		super();
		this.limit = limit;
	}

	@Override
	public void run() {

		try {

			long input;
			
			for (input = 5; input <= limit; input++) {

				process(input);
				
			}
			
			System.out.println(input + " OUTPUT = " + output);

		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private void process(long input) throws InterruptedException {

		sq_root = Math.sqrt(input);

		n_sq_root = (long) sq_root;

		lps = 0l;
		ups = 0l;

		if ((sq_root % 1) != 0 && (long) redundant == n_sq_root) {

			lps = r_lps;
			ups = r_ups;

			
		} else {

			lps = getLowerPrime(n_sq_root);
			ups = getUpperPrime(sq_root);
			
//			System.out.println(String.format("non REDUNDANT sqrt =%f for n = %d", sq_root,input ));

			if (sq_root % 1 != 0) {
				
				r_ups = ups;
				r_lps = lps;
				redundant = sq_root;
			}
		}

//		 System.out.println(String.format("outside #### LPS = %d UPS = %d for	sqrt =%f for n = %d", lps, ups,sq_root, input ));

		if ((lps != 0 && ups != 0) && ((input % lps == 0) ^ (input % ups == 0))) {

//			 System.out.println(String.format("inside #### LPS = %d UPS = %d for sqrt = %f for n = %d", lps, ups,sq_root, input ));

			output += (input);

		}
	}

	private static long getLowerPrime(long input) {

		// System.out.println("finding LPS = " + input);

		for (long i = input; i >= 2; i--) {

			if(isPrime(i)){
			
				return i;
			}
			
		}

		return 0;

	}

	private static long getUpperPrime(double input) {

		// System.out.println("finding UPS = " + input);

		long start = (long) input;

		if (input % 1 != 0) {

			start++;
		}


		while (!isPrime(start)) {
			start++;
		}

		return start;

	}
	
	private static boolean isPrime(long input) {
		
		//below statement is not required at all in current case
		/*if (input < 2){
			return false;
		}*/
		
		for (int i = 2; i*i <= input; i++){
		
			if (input % i == 0) 
				return false;
		}
		
		return true;
	}

}
