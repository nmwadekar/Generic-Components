class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        
        int nRow = matrix.length;
        int nCol = matrix[0].length;

        //System.out.println("nRow=" + nRow);
        //System.out.println("nCol="+nCol);

        int mRow = 0, mCol = 0, min = Integer.MAX_VALUE, n;

        for (int i = 0; i < nRow; i++) {

            //System.out.println(i+" at Current value "+matrix[i][0]);
            //System.out.println(min+" is MIN & current diff = "+Math.abs(matrix[i][0] - target));

            if (min > Math.abs(matrix[i][0] - target) && target >= matrix[i][0] ) {

                //System.out.println("Near to " + matrix[i][0]);

                min = Math.abs(matrix[i][0] - target);
                mRow = i;
                if (matrix[i][0] == target) {
                    //System.out.println(i+" - found at - " + 0);
                    return true;
                }
            }
        }

//        mRow = min;
        min = Integer.MAX_VALUE;

        for (int i = 0; i < nCol; i++) {

            //System.out.println(i+" at column Current value "+matrix[0][i]);
            //System.out.println(min+" = MIN & diff = "+Math.abs(matrix[0][i] - target));

            if (min > Math.abs(matrix[0][i] - target) && target >= matrix[0][i]) {

                //System.out.println("To near = " + matrix[0][i]);

                min = Math.abs(matrix[0][i] - target);
                mCol = i;
                if (matrix[0][i] == target) {
                    //System.out.println(0+" - found at - " + i);
                    return true;
                }
            }
        }

//        mCol = min;

        //System.out.println(mRow);
        //System.out.println(mCol);


        for (int i = 0; i < nCol; i++) {

            //System.out.println("Founding at = " + i);

            if (matrix[mRow][i] == target) {

                //System.out.println("Found at = " + i + "," + mRow);

                return true;
            }
        }

//        System.out.println(Arrays.deepToString(matrix));

        return false;


    }
}
