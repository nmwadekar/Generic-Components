package nmw.euler;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

public class SemiDivisibleProducer implements Runnable {

    private long input;
    private BlockingQueue<Long> output;
    private final static AtomicReference<Double> redundant = new AtomicReference<Double>(0d);
    private static AtomicLong r_ups = new AtomicLong(0L),r_lps = new AtomicLong(0L);

    public SemiDivisibleProducer(long input, BlockingQueue<Long> output) {
        super();
        this.input = input;
        this.output = output;
    }


    @Override
    public void run() {

        double sq_root = Math.sqrt(input);

        long n_sq_root = (long) sq_root;


        long lps = 0l;
        long ups = 0l;

        if(sq_root % 1 != 0 && redundant.get().longValue() ==  n_sq_root){

//            System.out.println(String.format(" sqrt =%f for n = %d", sq_root, input ));

            lps = r_lps.get();
            ups = r_ups.get();

//            return;
        }else{

             lps = getLowerPrime(n_sq_root);
             ups = getUpperPrime(sq_root);

             if(sq_root % 1 != 0){
                 r_ups.getAndSet(ups);
                 r_lps.getAndSet(lps);
                 redundant.getAndSet(sq_root);
             }
        }

//        System.out.println(String.format("outside #### LPS = %d UPS = %d for sqrt =%f for n = %d", lps, ups,sq_root, input ));

        if ((lps != 0 && ups != 0) && ((input % lps == 0) ^ (input % ups == 0))) {

//            System.out.println(String.format("inside #### LPS = %d UPS = %d for sqrt = %f for n = %d", lps, ups,sq_root, input ));

            output.add(input);


//            r_ups.getAndSet(ups);
//            r_lps.getAndSet(lps);
        }

    }

    private static long getLowerPrime(long input) {

//		System.out.println("finding LPS = " + input);

//        --input;

        for (long i =input; i >= 2 && isPrime(i); i--) {

//				System.out.println("Found LPS = " + i);

            return i;
        }

        return 0;

    }

    private static long getUpperPrime(double input) {

//		System.out.println("finding UPS = " + input);

        long start = (long)input;

        if(input % 1 != 0){

            start++;
        }

        /*for (long i = start; *//*isPrime(i)*//*; i++) {

            if(isPrime(i)){
                return i;
            }

        }*/

        while(!isPrime(start)){
            start++;
        }

        return start;

    }


    private static boolean isPrime(long input) {

//		System.out.println("Finding prime for = " + input);

//        boolean output = true;

        /*if(input == 2){

            return true;
        }*/

        if (input % 2 == 0 && input != 2) {

            return false;
        }

        for (long i = 3; (input % i) == 0 && input != i && i <= (input / 2); i += 2) {

            return false;
        }

        return true;
    }

    @Override
    public String toString() {
        return "SemiDivisibleProducer{" +
                "input=" + input +
                '}';
    }
}
