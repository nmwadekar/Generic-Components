package nmw.euler.twothreefour;

import java.util.concurrent.BlockingQueue;

public class SemiDivisibleProducer implements Runnable {

	private long input;
	private BlockingQueue<Long> output;
	
	public SemiDivisibleProducer(long input, BlockingQueue<Long> output) {
		super();
		this.input = input;
		this.output = output;
	}


	@Override
	public void run() {
		
		double n_sq_root = Math.sqrt(input);
		
		long lps = getLowerPrime(n_sq_root);
		long ups = getUpperPrime(n_sq_root);
		
		if((lps != 0 && ups != 0) &&   (input % lps == 0) ^ (input % ups == 0)){
			
			System.out.println(String.format("#### LPS = %d UPS = %d for sqrt = %f for n = %d", lps, ups,n_sq_root, input ));
			
			output.add(input);
		}
		
	}

	private static long getLowerPrime(double input) {

//		System.out.println("finding LPS = " + input);
		
		for(long i= (int) input; i >= 0; i--){
			
			if(isPrime(i)){
				
//				System.out.println("Found LPS = " + i);
				
				return i;
			}
		}
		
		return 0;
		
	}

	private static long getUpperPrime(double input) {

//		System.out.println("finding UPS = " + input);
		
		long start = (long)input;
		
		if(input != Math.round(input)){
			
			start++;
		}
		
		for(long i= start; i >= input ; i++){
			
			if(isPrime(i)){
				
//				System.out.println("Found UPS = " + i);
				
				return i;
			}
		}
		
		return 0;
		
	}


	private static boolean isPrime(long input) {

//		System.out.println("Finding prime for = " + input);

		if(input == 2){
			return true;
		}else if (input <= 1){
			return false;
		}
		
		for (long i = 2; i <= input / 2; i++) {

			if (input % i == 0 && i != input) {

				return false;
			}
		}

		return true;
	}

}
